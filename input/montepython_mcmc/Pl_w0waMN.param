#------Experiments to test (separated with commas)-----
data.experiments=['fake_planck_realistic']

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'

# Cosmological parameter list
data.parameters['w0_fld']          = [-1.0,      -1.5, -0.5,        0.2,  1, 'cosmo']
#data.parameters['wa_fld']          = [ 0.0,      -1.0,  1.0,        0.281240,  1, 'cosmo']
data.parameters['Omega_b']         = [0.0491989,     0.005, 1,  0.0004,    1, 'cosmo']
data.parameters['h']               = [0.6737,        0.1, 1.5,  0.017,    1, 'cosmo']
data.parameters['n_s']             = [0.96605,       0.8, 1.2,  0.009,    1, 'cosmo']
data.parameters['sigma8']          = [0.81,          0.7, 0.9, 0.02,    1, 'cosmo']
data.parameters['N_eff_camb']      = [3.044,         1.015,    6,  0.2,    1, 'cosmo']
data.parameters['m_nu_camb']       = [0.06,          5e-3,  1,   0.06,    1, 'cosmo']
data.parameters['Omega_m_camb']    = [0.3145714273,  0.005, 1,   0.015,    1, 'cosmo']
#data.parameters['tau_reio']        = [0.0543,      0.004, None,       0.007,    1, 'cosmo']

# Nuisance parameter list
# Fiducial values are given by b=sqrt(1+\bar{z}) in each bin
# Arbitrary limits for faster convergence in MCMC

# Fixed parameter list
data.cosmo_arguments['Omega_Lambda'] = 0.0
data.cosmo_arguments['YHe'] = 0.2454006
data.cosmo_arguments['T_cmb'] = 2.7255
#data.cosmo_arguments['reio_parametrization'] = 'reio_none'
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['z_reio'] = 7.6711

# Non-Linear matter power spectrum settings
#data.cosmo_arguments['P_k_max_1/Mpc'] = .
#data.cosmo_arguments['k_per_decade_for_pk'] = 50.
#data.cosmo_arguments['k_per_decade_for_bao'] = 50.
#data.cosmo_arguments['non linear']= 'hmcode2020'
#data.cosmo_arguments['nonlinear_min_k_max']= 80.

# Number of steps taken, by default (overwritten by the -N command)
data.N=10
# Number of accepted steps before writing to file the chain. Larger means less
# access to disc, but this is not so much time consuming.
data.write_step=5
